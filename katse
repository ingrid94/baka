from tkinter import *


class Block:
    def __init__(self, coords, canvas, poly_cords):
        self.coords = coords
        self.canvas = canvas
        self.poly_cords = poly_cords
        self.obj_id = None

    def get_closest(self, movable_blocks):
        magnet_x = movable_blocks[self.obj_id].renewMagnets()[0][0]
        magnet_y = movable_blocks[self.obj_id].renewMagnets()[0][1]
        # leiab lähima objekti magnetile
        closest_object = self.canvas.find_closest(magnet_x, magnet_y, halo=30, start=self.obj_id)
        # kui sõnestikus on "line", siis kustutab selle
        if "line" in movable_blocks.values():
            self.line_delete(movable_blocks)
        return closest_object

    def move_magnets(self, movable_blocks):
    # magnetide liigutamine ja kontrollimine liikumise pealt ning nende märkimine
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id and movable_blocks[closest_object[0]] != "line":
            stable_instance = movable_blocks[closest_object[0]]
            stable_coords = stable_instance.renewMagnets()
            line_x = stable_coords[1][0]
            line_y = stable_coords[1][1]
            # joonistab klotsile märke
            line_id = self.canvas.create_line(line_x - 20, line_y - 5, line_x - 15, line_y,
                                              line_x, line_y, line_x + 5, line_y - 5,
                                              fill="green", width=3)
            movable_blocks[line_id] = "line"
        # kustutab märke klotsi juurest
        elif closest_object[0] == self.obj_id and "line" in movable_blocks.values():
            self.line_delete(movable_blocks)

    # highlighti kustutamiseks meetod
    def line_delete(self, movable_blocks):
        line_key = None
        for key in movable_blocks:
            if movable_blocks[key] == "line":
                self.canvas.delete(key)
                line_key = key
        if line_key is not None:
            del movable_blocks[line_key]


class ControlBlock(Block):
    def __init__(self, coords, canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # ülemine ühendus, alumine ühendus, kõige alumine ühendus, tingimus
        self.connected = [None, None, None, None]
        self.color = 'orange'
        self.outline = 'chocolate'

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renewMagnets(self):
        upper_magnet = [self.coords[0] + 40, self.coords[1] + 5]
        lower_magnet = [self.coords[0] + 50, self.coords[1] + 35]
        return [upper_magnet, lower_magnet]

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y, old_coords[2]]
        self.canvas.move(self.obj_id, delta_x, delta_y)

    def move_to_magnet(self, movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renewMagnets()[0][0]
        magnet_y = self.renewMagnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renewMagnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.change_coords(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance


class CommandBlock(Block):
    def __init__(self, coords, canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # ülemine, alumine
        self.connected = [None, None]
        self.color = 'violet red'
        self.outline = 'purple'

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renewMagnets(self):
        upper_magnet = [self.coords[0] + 40, self.coords[1] + 5]
        lower_magnet = [self.coords[0] + 40, self.coords[1] + 40]
        return [upper_magnet, lower_magnet]

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y]
        self.canvas.move(self.obj_id, delta_x, delta_y)

    def move_to_magnet(self,movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renewMagnets()[0][0]
        magnet_y = self.renewMagnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renewMagnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.change_coords(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance


class FunctionBlock(Block):
    def __init__(self, coords, canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # mis bloki sees on
        self.connected = [None]
        self.color = 'dodger blue'
        self.outline = 'steel blue'

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renewMagnets(self):
        magnet = [self.coords[0], self.coords[1] + 5]
        return magnet

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y]
        self.canvas.move(self.obj_id, delta_x, delta_y)

    def move_to_magnet(self,movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renewMagnets()[0][0]
        magnet_y = self.renewMagnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renewMagnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.change_coords(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance


class ChooseBlocksCanvas:
    def __init__(self, root):
        self.top = Toplevel(root)
        self.canvas = Canvas(self.top, width=500, height=500, bg="white", highlightthickness=0)
        self.canvas.pack()

    def getFocusSet(self):
        return self.canvas.focus_set()

    @staticmethod
    def commandBlock_coords(x, y):
        points = [x, y + 5, x + 5, y,
                  x + 20, y, x + 25, y + 5,
                  x + 40, y + 5, x + 45, y,
                  x + 175, y, x + 180, y + 5,
                  x + 180, y + 30, x + 175, y + 35,
                  x + 45, y + 35, x + 40, y + 40,
                  x + 25, y + 40, x + 20, y + 35,
                  x + 5, y + 35, x, y + 30,
                  x, y + 5]
        return points

    @staticmethod
    def controlBlock_coords(x, y, z):
        points = [x, y + 5, x + 5, y,
                  x + 20, y, x + 25, y + 5,
                  x + 40, y + 5, x + 45, y,
                  x + 175, y, x + 180, y + 5,
                  x + 180, y + 25, x + 175, y + 30,
                  x + 55, y + 30, x + 50, y + 35,
                  x + 35, y + 35, x + 30, y + 30,
                  x + 15, y + 30, x + 10, y + 35,
                  x + 10, y + 63 + z, x + 15, y + 68 + z,
                  x + 115, y + 68 + z, x + 120, y + 73 + z,
                  x + 120, y + 83 + z,
                  x + 115, y + 88 + z, x + 45, y + 88 + z,
                  x + 40, y + 93 + z, x + 25, y + 93 + z,
                  x + 20, y + 88 + z, x + 5, y + 88 + z,
                  x, y + 83 + z, x, y + 5]
        return points

    @staticmethod
    def functionBlock_coords(x, y):
        points = [x, y + 10, x + 10, y,
                  x + 140, y, x + 150, y + 10,
                  x + 140, y + 20, x + 10, y + 20,
                  x, y + 10]
        return points

    def create_blocks_fst(self):
        self.canvas.create_polygon(self.commandBlock_coords(50, 100), fill='violet red', outline='purple')
        self.canvas.create_polygon(self.functionBlock_coords(50, 200), fill='dodger blue', outline='steel blue')
        self.canvas.create_polygon(self.controlBlock_coords(50, 300, 0), fill='orange', outline='chocolate')

    def bind(self, function):
        self.canvas.bind("<ButtonPress-1>", function)


class MoveBlocksCanvas(ChooseBlocksCanvas):
    def __init__(self, root, t1):
        super().__init__(root)
        self.drag_data = {"x": 0, "y": 0, "item": None}
        self.binding()
        self.stableCanvas = t1
        self.stableCanvas.bind(self.create_blocks)
        self.movable_blocks = {}

    def create_blocks(self, event):
        self.stableCanvas.getFocusSet()
        resp = event.widget.find_overlapping(event.x, event.y, event.x, event.y)
        if len(resp) != 0:
            if resp[0] == 1:
                cords = self.stableCanvas.commandBlock_coords(0, 0)
                assignBlock = CommandBlock([0, 0], self.canvas, cords)
                obj_id = assignBlock.create_polygon()
                self.movable_blocks[obj_id] = assignBlock
            elif resp[0] == 2:
                cords = self.stableCanvas.functionBlock_coords(0, 0)
                boolOpBlock = FunctionBlock([0, 0], self.canvas, cords)
                obj_id = boolOpBlock.create_polygon()
                self.movable_blocks[obj_id] = boolOpBlock
            elif resp[0] == 3:
                cords = self.stableCanvas.controlBlock_coords(0, 0, 0)
                ifBlock = ControlBlock([0, 0, 0], self.canvas, cords)
                obj_id = ifBlock.create_polygon()
                self.movable_blocks[obj_id] = ifBlock

    def create_polygon(self, args, **kw):
        return self.canvas.create_polygon(args, kw)

    def onTokenButtonPress(self, event):
        active = self.canvas.find_overlapping(event.x, event.y, event.x, event.y)
        if len(active) != 0:
            peale = active[-1]
            self.drag_data["item"] = peale
            self.canvas.tag_raise(peale)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y

                #if isinstance(stable_instance, ControlBlock):
            #    stable_coords = stable_instance.coords
            #    cords = self.stableCanvas.controlBlock_coords(stable_coords[0], stable_coords[1], stable_coords[2]+35)
            #    stable_instance.poly_cords = cords
            #    stable_instance.coords[2] = 35
            #    self.canvas.delete(stable_instance.obj_id)
            #    stable_instance.create_polygon()
             #   self.movable_blocks[stable_instance.obj_id] = stable_instance

    def onTokenButtonRelease(self, event):
        if self.drag_data["item"] is not None:
            class_instance = self.movable_blocks[self.drag_data["item"]]
            class_instance.move_to_magnet(self.movable_blocks)

        self.drag_data["item"] = None
        self.drag_data["x"] = 0
        self.drag_data["y"] = 0

    def onTokenMotion(self, event):
        delta_x = event.x - self.drag_data["x"]
        delta_y = event.y - self.drag_data["y"]
        if self.drag_data["item"] is not None:
            class_instance = self.movable_blocks[self.drag_data["item"]]
            # muudab koordinaate ja liigutab klotsi
            class_instance.change_coords(delta_x, delta_y)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y
            class_instance.move_magnets(self.movable_blocks)

    def binding(self):
        self.canvas.bind("<ButtonPress-1>", self.onTokenButtonPress)
        self.canvas.bind("<ButtonRelease-1>", self.onTokenButtonRelease)
        self.canvas.bind("<B1-Motion>", self.onTokenMotion)


def main():
    root = Tk()
    root.geometry("+1+1")
    Button(command=root.quit, text="Quit").pack()
    t1 = ChooseBlocksCanvas(root)
    t1.top.geometry("+10+100")
    ChooseBlocksCanvas.create_blocks_fst(t1)
    t2 = MoveBlocksCanvas(root, t1)
    t2.top.geometry("+520+100")
    root.mainloop()

main()
