from tkinter import *


class Block:
    def __init__(self, coords, canvas, poly_cords):
        self.coords = coords
        self.canvas = canvas
        self.poly_cords = poly_cords
        self.obj_id = None

    def get_closest(self, movable_blocks):
        magnet_x = movable_blocks[self.obj_id].renew_magnets()[0][0]
        magnet_y = movable_blocks[self.obj_id].renew_magnets()[0][1]
        # leiab lähima objekti magnetile
        closest_object = self.canvas.find_closest(magnet_x, magnet_y, halo=20, start=self.obj_id)
        # kui sõnestikus on "line", siis kustutab selle
        if "line" in movable_blocks.values():
            self.line_delete(movable_blocks)
        return closest_object

    def check_magnets_during_move(self, movable_blocks):
        # magnetide liigutamine ja kontrollimine liikumise pealt ning nende märkimine
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id and movable_blocks[closest_object[0]] != "line":
            stable_instance = movable_blocks[closest_object[0]]
            stable_coords = stable_instance.renew_magnets()
            line_x = stable_coords[1][0]
            line_y = stable_coords[1][1]
            # joonistab klotsile märke "line"
            line_id = self.canvas.create_line(line_x - 20, line_y - 5, line_x - 15, line_y,
                                              line_x, line_y, line_x + 5, line_y - 5,
                                              fill="green", width=3)
            movable_blocks[line_id] = "line"
        # kustutab märke klotsi juurest
        elif closest_object[0] == self.obj_id and "line" in movable_blocks.values():
            self.line_delete(movable_blocks)

    # highlighti kustutamiseks meetod
    def line_delete(self, movable_blocks):
        line_key = None
        for key in movable_blocks:
            if movable_blocks[key] == "line":
                self.canvas.delete(key)
                line_key = key
        if line_key is not None:
            del movable_blocks[line_key]


class ControlBlock(Block):
    def __init__(self, coords, canvas, stable_canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # ülemine ühendus, alumine ühendus, kõige alumine ühendus, tingimus
        self.connected = [None, None, None, None]
        self.color = 'orange'
        self.outline = 'chocolate'
        self.stableCanvas = stable_canvas

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renew_magnets(self):
        upper_magnet = [self.coords[0] + 40, self.coords[1] + 5]
        lower_magnet = [self.coords[0] + 50, self.coords[1] + 35]
        return [upper_magnet, lower_magnet]

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y, old_coords[2], old_coords[3]]
        self.canvas.move(self.obj_id, delta_x, delta_y)
        self.lower_block()
        self.renew_magnets()

    def move_connected(self, delta_x, delta_y):
        self.change_coords(delta_x, delta_y)
        if self.connected[1] is not None:
            self.connected[1].move_connected(delta_x, delta_y)

    def move_to_magnet(self, movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renew_magnets()[0][0]
        magnet_y = self.renew_magnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renew_magnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.move_connected(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance

    def disconnect_magnet(self):
        self.connected[0].connected[1] = None
        self.connected[0] = None

    def get_length(self):
        blo_len = self.coords[2] + self.coords[3]
        if self.connected[1] is not None:
            blo_len += self.connected[1].get_length()
        return blo_len

    def redraw(self, movable_blocks):
        blo_len = self.connected[1].get_length()
        self.coords[3] = blo_len
        self.poly_cords = self.stableCanvas.control_block_coords(self.coords[0], self.coords[1], self.coords[2], blo_len)
        del movable_blocks[self.obj_id]
        self.canvas.delete(self.obj_id)
        self.obj_id = self.create_polygon()
        movable_blocks[self.obj_id] = self

    def lower_block(self):
        self.canvas.tag_lower(self.obj_id)
        if self.connected[1] is not None:
            self.connected[1].lower_block()


class CommandBlock(Block):
    def __init__(self, coords, canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # ülemine, alumine
        self.connected = [None, None]
        self.color = 'violet red'
        self.outline = 'purple'

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renew_magnets(self):
        upper_magnet = [self.coords[0] + 40, self.coords[1] + 5]
        lower_magnet = [self.coords[0] + 40, self.coords[1] + 40]
        return [upper_magnet, lower_magnet]

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y, old_coords[2]]
        self.canvas.move(self.obj_id, delta_x, delta_y)
        self.lower_block()
        self.renew_magnets()

    def move_connected(self, delta_x, delta_y):
        self.change_coords(delta_x, delta_y)
        if self.connected[1] is not None:
            self.connected[1].move_connected(delta_x, delta_y)

    def move_to_magnet(self, movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renew_magnets()[0][0]
        magnet_y = self.renew_magnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renew_magnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.move_connected(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance
            self.check_control_block(movable_blocks)

    def disconnect_magnet(self):
        self.connected[0].connected[1] = None
        self.connected[0] = None

    def get_length(self):
        blo_len = self.coords[2]
        if self.connected[1] is not None:
            blo_len += self.connected[1].get_length()
        return blo_len

    def check_control_block(self, movable_blocks):
        if self.connected[0].connected[0] is not None:
            self.connected[0].check_control_block(movable_blocks)
        if isinstance(self.connected[0], ControlBlock):
            self.connected[0].redraw(movable_blocks)
        self.canvas.tag_raise(self.obj_id)

    def lower_block(self):
        if self.connected[1] is not None:
            self.connected[1].lower_block()


class FunctionBlock(Block):
    def __init__(self, coords, canvas, poly_cords):
        super().__init__(coords, canvas, poly_cords)
        # mis bloki sees on
        self.connected = [None]
        self.color = 'dodger blue'
        self.outline = 'steel blue'

    def create_polygon(self):
        self.obj_id = self.canvas.create_polygon(self.poly_cords, fill=self.color, outline=self.outline)
        return self.obj_id

    def renew_magnets(self):
        magnet = [self.coords[0], self.coords[1] + 5]
        return magnet

    def change_coords(self, delta_x, delta_y):
        old_coords = self.coords
        self.coords = [old_coords[0] + delta_x, old_coords[1] + delta_y]
        self.canvas.move(self.obj_id, delta_x, delta_y)
        self.move_connected(delta_x, delta_y)
        self.renew_magnets()

    def move_connected(self, delta_x, delta_y):
        self.change_coords(delta_x, delta_y)
        if self.connected[1] is not None:
            self.connected[1].move_connected(delta_x, delta_y)

    def move_to_magnet(self, movable_blocks):
        # lahti laskmisel paneb klotsi õigesse kohta
        magnet_x = self.renew_magnets()[0][0]
        magnet_y = self.renew_magnets()[0][1]
        closest_object = self.get_closest(movable_blocks)
        if closest_object[0] != self.obj_id:
            stable_instance = movable_blocks[closest_object[0]]
            stable_magnet = stable_instance.renew_magnets()
            delta_x = stable_magnet[1][0] - magnet_x
            delta_y = stable_magnet[1][1] - magnet_y
            self.move_connected(delta_x, delta_y)
            stable_instance.connected[1] = self
            self.connected[0] = stable_instance

    def disconnect_magnet(self):
        self.connected[0] = None


class ChooseBlocksCanvas:
    def __init__(self, root):
        self.top = Toplevel(root)
        self.canvas = Canvas(self.top, width=500, height=500, bg="white", highlightthickness=0)
        self.canvas.pack()

    def get_focus_set(self):
        return self.canvas.focus_set()

    @staticmethod
    def command_block_coords(x, y, z):
        points = [x, y + 5, x + 5, y,
                  x + 20, y, x + 25, y + 5,
                  x + 40, y + 5, x + 45, y,
                  x + 175, y, x + 180, y + 5,
                  x + 180, y + z-5, x + 175, y + z,
                  x + 45, y + z, x + 40, y + z+5,
                  x + 25, y + z+5, x + 20, y + z,
                  x + 5, y + z, x, y + z-5,
                  x, y + 5]
        return points

    @staticmethod
    # x,y on ülemise vasaku nurga koordinaadid, z on tingimusbloki kõrgus, w on vahe+alumise riba kõrgus
    def control_block_coords(x, y, z, w):
        points = [x, y + 5, x + 5, y,
                  x + 20, y, x + 25, y + 5,
                  x + 40, y + 5, x + 45, y,
                  x + 175, y, x + 180, y + 5,
                  x + 180, y + z-5, x + 175, y + z,
                  x + 55, y + z, x + 50, y + z+5,
                  x + 35, y + z+5, x + 30, y + z,
                  x + 15, y + z, x + 10, y + z+5,
                  x + 10, y + w+28, x + 15, y + w+33,
                  x + 115, y + w+33, x + 120, y + w+38,
                  x + 120, y + w+48,
                  x + 115, y + w+53, x + 45, y + w+53,
                  x + 40, y + w+58, x + 25, y + w+58,
                  x + 20, y + w+53, x + 5, y + w+53,
                  x, y + w+48, x, y + 5]
        return points

    @staticmethod
    def function_block_coords(x, y):
        points = [x, y + 10, x + 10, y,
                  x + 140, y, x + 150, y + 10,
                  x + 140, y + 20, x + 10, y + 20,
                  x, y + 10]
        return points

    def create_blocks_fst(self):
        self.canvas.create_polygon(self.command_block_coords(50, 100, 35), fill='violet red', outline='purple')
        self.canvas.create_polygon(self.function_block_coords(50, 200), fill='dodger blue', outline='steel blue')
        self.canvas.create_polygon(self.control_block_coords(50, 300, 30, 35), fill='orange', outline='chocolate')

    def bind(self, function):
        self.canvas.bind("<ButtonPress-1>", function)


class MoveBlocksCanvas(ChooseBlocksCanvas):
    def __init__(self, root, t1):
        super().__init__(root)
        self.drag_data = {"x": 0, "y": 0, "item": None}
        self.binding()
        self.stableCanvas = t1
        self.stableCanvas.bind(self.create_blocks)
        self.movable_blocks = {}

    def create_blocks(self, event):
        self.stableCanvas.get_focus_set()
        resp = event.widget.find_overlapping(event.x, event.y, event.x, event.y)
        if len(resp) != 0:
            if resp[0] == 1:
                cords = self.stableCanvas.command_block_coords(0, 0, 35)
                assign_block = CommandBlock([0, 0, 35], self.canvas, cords)
                obj_id = assign_block.create_polygon()
                self.movable_blocks[obj_id] = assign_block
            elif resp[0] == 2:
                cords = self.stableCanvas.function_block_coords(0, 0)
                bool_op_block = FunctionBlock([0, 0], self.canvas, cords)
                obj_id = bool_op_block.create_polygon()
                self.movable_blocks[obj_id] = bool_op_block
            elif resp[0] == 3:
                cords = self.stableCanvas.control_block_coords(0, 0, 30, 35)
                if_block = ControlBlock([0, 0, 30, 35], self.canvas, self.stableCanvas, cords)
                obj_id = if_block.create_polygon()
                self.movable_blocks[obj_id] = if_block

    def create_polygon(self, args, **kw):
        return self.canvas.create_polygon(args, kw)

    def on_token_button_press(self, event):
        active = self.canvas.find_overlapping(event.x, event.y, event.x, event.y)
        if len(active) != 0:
            peale = active[-1]
            self.drag_data["item"] = peale
            self.canvas.tag_raise(peale)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y
            # kui liigutamist alustada ja ülemine pole None, siis lahti ühendada
            if self.movable_blocks[peale].connected[0] is not None:
                self.movable_blocks[peale].disconnect_magnet()

    def on_token_button_release(self, event):
        if self.drag_data["item"] is not None:
            class_instance = self.movable_blocks[self.drag_data["item"]]
            class_instance.move_to_magnet(self.movable_blocks)

        self.drag_data["item"] = None
        self.drag_data["x"] = 0
        self.drag_data["y"] = 0

    def on_token_motion(self, event):
        delta_x = event.x - self.drag_data["x"]
        delta_y = event.y - self.drag_data["y"]
        if self.drag_data["item"] is not None:
            class_instance = self.movable_blocks[self.drag_data["item"]]
            # muudab koordinaate ja liigutab klotsi
            class_instance.move_connected(delta_x, delta_y)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y
            class_instance.check_magnets_during_move(self.movable_blocks)

    def binding(self):
        self.canvas.bind("<ButtonPress-1>", self.on_token_button_press)
        self.canvas.bind("<ButtonRelease-1>", self.on_token_button_release)
        self.canvas.bind("<B1-Motion>", self.on_token_motion)


def main():
    root = Tk()
    root.geometry("+1+1")
    Button(command=root.quit, text="Quit").pack()
    t1 = ChooseBlocksCanvas(root)
    t1.top.geometry("+10+100")
    ChooseBlocksCanvas.create_blocks_fst(t1)
    t2 = MoveBlocksCanvas(root, t1)
    t2.top.geometry("+520+100")
    root.mainloop()

main()
