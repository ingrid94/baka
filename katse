from tkinter import *


class Block:

    def __init__(self, coords, obj_id, color):
        self.coords = coords
        self.id = obj_id
        self.color = color


class IfBlock(Block):

    def __init__(self, coords, obj_id, color):
        super().__init__(coords, obj_id, color)
        # ülemine ühendus, alumine ühendus, kõige alumine ühendus, tingimus
        self.connected = [None, None, None, None]

    def renewMagnets(self):
        upper_magnet = [self.coords[0]+40, self.coords[1]+5]
        lower_magnet = [self.coords[0]+50, self.coords[1]+35]
        return [upper_magnet, lower_magnet]


class AssignBlock(Block):

    def __init__(self, coords, obj_id, color):
        super().__init__(coords, obj_id, color)
        # ülemine, alumine
        self.connected = [None, None]

    def renewMagnets(self):
        upper_magnet = [self.coords[0]+40, self.coords[1]+5]
        lower_magnet = [self.coords[0]+40, self.coords[1]+40]
        return [upper_magnet, lower_magnet]


class BoolOpBlock(Block):

    def __init__(self, coords, obj_id, color):
        super().__init__(coords, obj_id, color)
        # mis bloki sees on
        self.connected = [None]


class ChooseBlocksCanvas:
    def __init__(self, root):
        self.top = Toplevel(root)
        self.canvas = Canvas(self.top, width=500, height=500, bg="white", highlightthickness=0)
        self.canvas.pack()

    def getFocusSet(self):
        return self.canvas.focus_set()

    @staticmethod
    def commandBlock_coords(x, y):
        points = [x, y+5, x+5, y,
                  x+20, y, x+25, y+5,
                  x+40, y+5, x+45, y,
                  x+175, y, x+180, y+5,
                  x+180, y+30, x+175, y+35,
                  x+45, y+35, x+40, y+40,
                  x+25, y+40, x+20, y+35,
                  x+5, y+35, x, y+30,
                  x, y+5]
        return points

    @staticmethod
    def controlBlock_coords(x, y):
        points = [x, y+5, x+5, y,
                  x+20, y, x+25, y+5,
                  x+40, y+5, x+45, y,
                  x+175, y, x+180, y+5,
                  x+180, y+25, x+175, y+30,
                  x+55, y+30, x+50, y+35,
                  x+35, y+35, x+30, y+30,
                  x+15, y+30, x+10, y+35,
                  x+10, y+63, x+15, y+68,
                  x+115, y+68, x+120, y+73,
                  x+120, y+83,
                  x+115, y+88, x+45, y+88,
                  x+40, y+93, x+25, y+93,
                  x+20, y+88, x+5, y+88,
                  x, y+83, x, y+5]
        return points

    @staticmethod
    def functionBlock_coords(x, y):
        points = [x, y+10, x+10, y,
                  x+140, y, x+150, y+10,
                  x+140, y+20, x+10, y+20,
                  x, y+10]
        return points

    def create_blocks_fst(self):
        self.canvas.create_polygon(self.commandBlock_coords(50, 100), fill='violet red')
        self.canvas.create_polygon(self.functionBlock_coords(50, 200), fill='dodger blue')
        self.canvas.create_polygon(self.controlBlock_coords(50, 300), fill='orange')

    def bind(self, function):
        self.canvas.bind("<ButtonPress-1>", function)


class MoveBlocksCanvas(ChooseBlocksCanvas):

    def __init__(self, root):
        super().__init__(root)
        self.drag_data = {"x": 0, "y": 0, "item": None}
        self.binding()

    def create_polygon(self, args, **kw):
        return self.canvas.create_polygon(args, kw)

    def onTokenButtonPress(self, event):
        active = self.canvas.find_overlapping(event.x, event.y, event.x, event.y)
        if len(active) != 0:
            peale = active[-1]
            self.drag_data["item"] = peale
            self.canvas.tag_raise(peale)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y

    def onTokenButtonRelease(self, event):
        if self.drag_data["item"] is not None:
            class_instance = Controller.movable_blocks[self.drag_data["item"]]
            magnet_x = class_instance.renewMagnets()[0][0]
            magnet_y = class_instance.renewMagnets()[0][1]
            # praegu leiab teise objekti, oleks vaja, et leiaks lower_magneteid
            closest_object = self.canvas.find_closest(magnet_x, magnet_y, halo=30, start=self.drag_data["item"])
            if closest_object[0] != self.drag_data["item"]:
                stable_instance = Controller.movable_blocks[closest_object[0]]
                stable_magnet = stable_instance.renewMagnets()
                delta_x = stable_magnet[1][0]-magnet_x
                delta_y = stable_magnet[1][1]-magnet_y
                self.canvas.move(self.drag_data["item"], delta_x, delta_y)
                old_coords = class_instance.coords
                class_instance.coords = [old_coords[0]+delta_x, old_coords[1]+delta_y]
        self.drag_data["item"] = None
        self.drag_data["x"] = 0
        self.drag_data["y"] = 0

    def onTokenMotion(self, event):
        delta_x = event.x - self.drag_data["x"]
        delta_y = event.y - self.drag_data["y"]
        if self.drag_data["item"] is not None:
            class_instance = Controller.movable_blocks[self.drag_data["item"]]
            old_coords = class_instance.coords
            class_instance.coords = [old_coords[0]+delta_x, old_coords[1]+delta_y]
            self.canvas.move(self.drag_data["item"], delta_x, delta_y)
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y

    def binding(self):
        self.canvas.bind("<ButtonPress-1>", self.onTokenButtonPress)
        self.canvas.bind("<ButtonRelease-1>", self.onTokenButtonRelease)
        self.canvas.bind("<B1-Motion>", self.onTokenMotion)


class Controller:

    movable_blocks = {}

    def __init__(self, t1, t2):
        self.stableCanvas = t1
        self.moveCanvas = t2
        self.stableCanvas.bind(self.create_blocks)

    def create_blocks(self, event):
        self.stableCanvas.getFocusSet()
        resp = event.widget.find_overlapping(event.x, event.y, event.x, event.y)
        if len(resp) != 0:
            if resp[0] == 1:
                cords = self.stableCanvas.commandBlock_coords(0, 0)
                obj_id = self.moveCanvas.create_polygon(cords, fill='violet red')
                assignBlock = AssignBlock([0, 0], obj_id, 'violet red')
                self.movable_blocks[obj_id] = assignBlock
            elif resp[0] == 2:
                cords = self.stableCanvas.functionBlock_coords(0, 0)
                obj_id = self.moveCanvas.create_polygon(cords, fill='dodger blue')
                boolOpBlock = BoolOpBlock([0, 0], obj_id, 'dodger blue')
                self.movable_blocks[obj_id] = boolOpBlock
            elif resp[0] == 3:
                cords = self.stableCanvas.controlBlock_coords(0, 0)
                obj_id = self.moveCanvas.create_polygon(cords, fill='orange')
                ifBlock = IfBlock([0,0], obj_id, 'orange')
                self.movable_blocks[obj_id] = ifBlock


def main():
    root = Tk()
    root.geometry("+1+1")
    Button(command=root.quit, text="Quit").pack()
    t1 = ChooseBlocksCanvas(root)
    t1.top.geometry("+10+100")
    ChooseBlocksCanvas.create_blocks_fst(t1)
    t2 = MoveBlocksCanvas(root)
    t2.top.geometry("+520+100")
    Controller(t1, t2)
    root.mainloop()

main()
